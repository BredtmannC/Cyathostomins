LON_F[["s13"]][["spectrum"]][["mass"]]
library(MALDIquant)
library(MALDIquantForeign)
library(sda)
library(crossval)
library(entropy)
library(corpcor)
library(fdrtool)
LON_F<-readMzXmlData::readMzXmlDir("Y:/MinLON+msxml", removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = FALSE, fileExtension = "mzXML",
verbose = FALSE)
table(sapply(LON_F, length))
nlevels(LON_F)
levels(LON_F)
typeof(LON_F)
attributes(LON_F)
names(LON_F)
View(LON_F)
LON_F$spectra
LON_F$spectra[s1]
summary(LON_F)
library(MALDIquant)
library(MALDIquantForeign)
library(sda)
library(crossval)
library(entropy)
library(corpcor)
library(fdrtool)
LON_F<-readMzXmlData::readMzXmlDir("Y:/MinLON+msxml", removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = yes, fileExtension = "mzXML",
verbose = FALSE)
LON_F<-readMzXmlData::readMzXmlDir("Y:/MinLON+msxml", removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
View(LON_F)
nlevels(LON_F)
levels(LON_F)
table(sapply(LON_F, length))
typeof(LON_F)
attributes(LON_F)
names(LON_F)
LON_F$spectra
summary(LON_F)
LON_F<-readMzXmlData::readMzXmlDir("Y:/MinLON+msxml", removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = TRUE)
View(LON_F)
LON_F<-readMzXmlData::readMzXmlDir("Y:/MinLON+msxml", removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
nlevels(LON_F)
levels(LON_F)
table(sapply(LON_F, length))
spec <- readMzXmlData::readMzXmlFile (file.path("Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_03/0_A9/3/1SLin", "LON_f03_A9_3.mzXML")
typeof(LON_F)
attributes(LON_F)
names(LON_F)
LON_F$spectra
summary(LON_F)
typeof(LON_F)
attributes(LON_F)
View(LON_F)
class(LON_F)
library("readmzxmldata")
library("readMzXmlData", lib.loc="C:/Program Files/R/Library")
install.packages("readMzXmlData")
library("maldiquantforein")
library(maldiquantforeign)
library(MALDIquantForeign)
exampleDirectory <- system.file("Examples", package="readMzXmlData")
spec <- readMzXmlFile(file.path(exampleDirectory, "A1-0_A1.mzXML"))
print(spec$metaData)
plot(spec$spectrum$mass, spec$spectrum$intensity, type="l")
LON_F_Directory <- system.file("Y:\MinLON+msxml", package="readMzXmlData")
LON_F_Directory <- system.file("Y:/MinLON+msxml", package="readMzXmlData")
LON_F_Directory <- system.file("Y:/MinLON+msxml")
LON_F_Directory <- system.file("Y:/MinLON+msxml")
LON_F_Directory <- ("Y:/MinLON+msxml")
spec1 <- readMzXmlFile(file.path(LON_F_Directory, "LON_f01_A1_1.mzXML"))
spec1 <- readMzXmlFile(file.path(LON_F_Directory, "Y:\MinLON+msxml\Cylicostephanus longibursatus F\LON_F_01\0_A1\1\1SLin"))
spec1 <- readMzXmlFile(file.path(LON_F_Directory, "Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/1/1SLin"))
spec1 <- readMzXmlFile(file.path(LON_F_Directory, "Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/1/1SLin/LON_f01_A1_1.mzxml"))
View(LON_F)
LON_F2<-readMzXmlData::readMzXmlDir("LON_F_Directory", removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
LON_F2<-readMzXmlData::readMzXmlDir("ON_F_Directory, removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
LON_F2<-readMzXmlData::readMzXmlDir(LON_F_Directory, removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
spec1 <- readMzXmlFile(file.path("Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/1/1SLin/LON_f01_A1_1.mzxml"))
print(spec1$metaData)
plot(spec$spectrum$mass, spec$spectrum$intensity, type="l")
plot(spec1$spectrum$mass, spec1$spectrum$intensity, type="l")
LON_F3<-importMzXml("Y:/MinLON+msxml")
LON_F4<-importMzXml(LON_F_Directory)
LON_F5<-importMzXml(LON_F_Directory,removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
LON_F5<-importMzXml(LON_F_Directory ,removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
LON_F5<-importMzXml("LON_F_Directory!" ,removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
LON_F5<-importMzXml(LON_F_Directory ,removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
LON_F5<-importMzXml("LON_F_Directory" ,removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
LON_F5<-importMzXml(LON_F_Directory)
LON_F6<-importMzXml(LON_F_Directory,verbose = FALSE)
library("readMzXmlData", lib.loc="C:/Program Files/R/Library")
install.packages("readMzXmlData")
library(readMzXmlData)
library(MALDIquant)
library(MALDIquantForeign)
library(readMzXmlData)
LON_F_Directory <- ("Y:/MinLON+msxml")
LON_F<-importMzXml(LON_F_Directory, fileExtension = "mzXML",verbose = FALSE)
LON_F<-importMzXml(LON_F_Directory,verbose = FALSE)
View(LON_F)
nlevels(LON_F)
levels(LON_F)
table(sapply(LON_F, length))
attributes(LON_F)
names(LON_F)
typeof(LON_F)
LON_F$spectra
class(LON_F)
summary(LON_F)
spec1 <- readMzXmlFile(file.path(LON_F_Directory, "Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/1/1SLin/LON_f01_A1_1.mzxml"))
spec2 <- readMzXmlFile(file.path("Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/2/1SLin/LON_f01_A1_2.mzxml"))
spec1 <- readMzXmlFile(file.path("Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/1/1SLin/LON_f01_A1_1.mzxml"))
plot(spec1$spectrum$mass, spec1$spectrum$intensity, type="l")
plot(spec2$spectrum$mass, spec2$spectrum$intensity, type="l")
LON_F3<-importMzXml("Y:/MinLON+msxml")
View(LON_F3)
View(LON_F3)
data(LON_F)
data(LON_F_Directory)
View(LON_F)
length(LON_F)
LON_F[1:3]
any(sapply(LON_F, isEmpty))
table(sapply(LON_F, length))
all(sapply(LON_F, isRegular))
LON_F<-importMzXml(LON_F_Directory,verbose = FALSE,centroided=FALSE)
all(sapply(LON_F, isRegular))
LON_F_Directory <- ("Y:/MinLON+msxml")
LON_F<-importMzXml(LON_F_Directory,verbose = FALSE,centroided=FALSE)
LON_F2<-readMzXmlData::readMzXmlDir("Y:/MinLON+msxml", removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
LON_F3<-importMzXml("Y:/MinLON+msxml")
table(sapply(LON_F, length))
typeof(LON_F)
class(LON_F)
summary(LON_F)
spec1 <- readMzXmlFile(file.path("Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/1/1SLin/LON_f01_A1_1.mzxml"))
spec2 <- readMzXmlFile(file.path("Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/2/1SLin/LON_f01_A1_2.mzxml"))
print(spec1$metaData)
plot(spec1$spectrum$mass, spec1$spectrum$intensity, type="l")
plot(spec2$spectrum$mass, spec2$spectrum$intensity, type="l")
data(LON_F)
length(LON_F)
LON_F[1:3]
any(sapply(LON_F, isEmpty))
table(sapply(LON_F, length))
all(sapply(LON_F, isRegular))
plot(LON_F[4])
plot(LON_F[[4])
plot(LON_F[[4]])
plot(LON_F[[1:45]])
plot(LON_F[[1:2]])
plot(LON_F[[2]])
spectra <- transformIntensity(LON_F,
+ method="sqrt")
spectra <- transformIntensity(LON_F, + method="sqrt")
spectra <- transformIntensity(LON_F, + method="sqrt")
spectra <- transformIntensity(LON_F, + method=c"sqrt")
spectra <- transformIntensity(LON_F, + method = c"sqrt")
spectra <- transformIntensity(LON_F, + method=c ("sqrt"))
spectra <- transformIntensity(LON_F, + method=c ("sqrt"))
spectra <- transformIntensity(LON_F, + method=c("sqrt"))
spectra <- transformIntensity(LON_F, + method=("sqrt"))
spectra <- transformIntensity(LON_F, method=("sqrt"))
View(LON_F)
spectra <- smoothIntensity(spectra, method="SavitzkyGolay",
+ halfWindowSize=10)
spectra <- smoothIntensity(spectra, method="SavitzkyGolay",
halfWindowSize=10)
baseline <- estimateBaseline(spectra[[16]], method="SNIP",
+ iterations=100)
plot(spectra[[16]])
lines(baseline, col="red", lwd=2)
baseline <- estimateBaseline(spectra[[16]], method="SNIP",
iterations=100)
plot(spectra[[16]])
lines(baseline, col="red", lwd=2)
spectra <- removeBaseline(spectra, method="SNIP",
iterations=100)
plot(spectra[[1]])
plot(spectra[[1]])
plot(spectra[[10]])
plot(spectra[[19]])
plot(spectra[[33]])
spectra <- calibrateIntensity(spectra, method="TIC")
spectra <- alignSpectra(spectra,
halfWindowSize=20,
SNR=2,
tolerance=0.002,
warpingMethod="lowess")
samples <- factor(sapply(spectra,
+ function(x)metaData(x)$sampleName))
samples <- factor(sapply(spectra,
function(x)metaData(x)$sampleName))
samples <- factor(sapply(spectra,
function(x)metaData(x)$sampleName))
sort.list(LON_F)
samples <- factor(sapply(spectra,
function(x)metaData(x)$file))
avgSpectra <- averageMassSpectra(spectra, labels=samples,
method="mean")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*2, col="blue")
plot(avgSpectra[[1]], xlim=c(2000, 5000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*2, col="blue")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*2, col="blue")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*3, col="blue")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*3, col="blue")
lines(noise[,1], noise[, 2]*3, col="green")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(3000, 6000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*3, col="blue")
lines(noise[,1], noise[, 2]*3, col="green")
peaks <- detectPeaks(avgSpectra, method="MAD",
+ halfWindowSize=20, SNR=2)
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
points(peaks[[1]], col="red", pch=4)
peaks <- detectPeaks(avgSpectra, method="MAD",
halfWindowSize=20, SNR=2)
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
points(peaks[[1]], col="red", pch=4)
peaks <- detectPeaks(avgSpectra, method="MAD",
halfWindowSize=20, SNR=2)
plot(avgSpectra[[1]], xlim=c(2000, 20000), ylim=c(0, 0.002))
points(peaks[[1]], col="red", pch=4)
library(MALDIquant)
library(MALDIquantForeign)
library(readMzXmlData)
LON_F_Directory <- ("Y:/MinLON+msxml")
LON_F<-importMzXml(LON_F_Directory,verbose = FALSE,centroided=FALSE)
LON_F2<-readMzXmlData::readMzXmlDir("Y:/MinLON+msxml", removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
LON_F3<-importMzXml("Y:/MinLON+msxml")
table(sapply(LON_F, length))
typeof(LON_F)
class(LON_F)
summary(LON_F)
spec1 <- readMzXmlFile(file.path("Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/1/1SLin/LON_f01_A1_1.mzxml"))
spec2 <- readMzXmlFile(file.path("Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/2/1SLin/LON_f01_A1_2.mzxml"))
print(spec1$metaData)
plot(spec1$spectrum$mass, spec1$spectrum$intensity, type="l")
plot(spec2$spectrum$mass, spec2$spectrum$intensity, type="l")
data(LON_F)
length(LON_F)
LON_F[1:3]
any(sapply(LON_F, isEmpty))
table(sapply(LON_F, length))
all(sapply(LON_F, isRegular))
plot(LON_F[[4]])
plot(LON_F[[2]])
spectra <- transformIntensity(LON_F, method=("sqrt"))
spectra <- smoothIntensity(spectra, method="SavitzkyGolay",
halfWindowSize=10)
baseline <- estimateBaseline(spectra[[16]], method="SNIP",
iterations=100)
plot(spectra[[16]])
lines(baseline, col="red", lwd=2)
spectra <- removeBaseline(spectra, method="SNIP",
iterations=100)
plot(spectra[[1]])
plot(spectra[[10]])
plot(spectra[[19]])
plot(spectra[[33]])
spectra <- calibrateIntensity(spectra, method="TIC")
spectra <- alignSpectra(spectra,
halfWindowSize=20,
SNR=2,
tolerance=0.002,
warpingMethod="lowess")
samples <- factor(sapply(spectra,
function(x)metaData(x)$file))
#Fehler: Ich brauche Zugriff auf die Sampleidentität, es kann bisher kein Average erstellt werden
avgSpectra <- averageMassSpectra(spectra, labels=samples,
method="mean")
#kein echtes average, da die technischen replikate nicht zusammen gezählt werden
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*2, col="blue")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(3000, 6000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*3, col="blue")
lines(noise[,1], noise[, 2]*3, col="green")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(3000, 6000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*3, col="green")
peaks <- detectPeaks(avgSpectra, method="MAD",
halfWindowSize=20, SNR=2)
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
points(peaks[[1]], col="red", pch=4)
peaks <- detectPeaks(avgSpectra, method="MAD",
halfWindowSize=20, SNR=2)
plot(avgSpectra[[1]], xlim=c(2000, 20000), ylim=c(0, 0.002))
points(peaks[[1]], col="red", pch=4)
library(MALDIquant)
library(MALDIquantForeign)
library(readMzXmlData)
LON_F_Directory <- ("Y:/MinLON+msxml")
LON_F<-importMzXml(LON_F_Directory,verbose = FALSE,centroided=FALSE)
LON_F2<-readMzXmlData::readMzXmlDir("Y:/MinLON+msxml", removeCalibrationScans = TRUE,
removeMetaData = FALSE, rewriteNames = TRUE, fileExtension = "mzXML",
verbose = FALSE)
table(sapply(LON_F, length))
typeof(LON_F)
class(LON_F)
summary(LON_F)
spec1 <- readMzXmlFile(file.path("Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/1/1SLin/LON_f01_A1_1.mzxml"))
spec2 <- readMzXmlFile(file.path("Y:/MinLON+msxml/Cylicostephanus longibursatus F/LON_F_01/0_A1/2/1SLin/LON_f01_A1_2.mzxml"))
print(spec1$metaData)
plot(spec1$spectrum$mass, spec1$spectrum$intensity, type="l")
plot(spec2$spectrum$mass, spec2$spectrum$intensity, type="l")
data(LON_F)
length(LON_F)
LON_F[1:3]
any(sapply(LON_F, isEmpty))
table(sapply(LON_F, length))
all(sapply(LON_F, isRegular))
plot(LON_F[[4]])
plot(LON_F[[2]])
spectra <- transformIntensity(LON_F, method=("sqrt"))
spectra <- smoothIntensity(spectra, method="SavitzkyGolay",
halfWindowSize=10)
baseline <- estimateBaseline(spectra[[16]], method="SNIP",
iterations=100)
plot(spectra[[16]])
lines(baseline, col="red", lwd=2)
spectra <- removeBaseline(spectra, method="SNIP",
iterations=100)
plot(spectra[[1]])
plot(spectra[[10]])
plot(spectra[[19]])
plot(spectra[[33]])
spectra <- calibrateIntensity(spectra, method="TIC")
spectra <- alignSpectra(spectra,
halfWindowSize=20,
SNR=2,
tolerance=0.002,
warpingMethod="lowess")
samples <- factor(sapply(spectra,
function(x)metaData(x)$file))
#Fehler: Ich brauche Zugriff auf die Sampleidentität, es kann bisher kein Average erstellt werden
avgSpectra <- averageMassSpectra(spectra, labels=samples,
method="mean")
#kein echtes average, da die technischen replikate nicht zusammen gezählt werden
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*2, col="blue")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(3000, 6000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*3, col="blue")
lines(noise[,1], noise[, 2]*3, col="green")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(3000, 6000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*3, col="green")
peaks <- detectPeaks(avgSpectra, method="MAD",
halfWindowSize=20, SNR=2)
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
points(peaks[[1]], col="red", pch=4)
peaks <- detectPeaks(avgSpectra, method="MAD",
halfWindowSize=20, SNR=2)
plot(avgSpectra[[1]], xlim=c(2000, 20000), ylim=c(0, 0.002))
points(peaks[[1]], col="red", pch=4)
samples <- factor(sapply(spectra,
function(x)metaData(x)$fileName"LON_F_0"))
#Fehler: Ich brauche Zugriff auf die Sampleidentität, es kann bisher kein Average erstellt werden
avgSpectra <- averageMassSpectra(spectra, labels=samples,
method="mean")
#kein echtes average, da die technischen replikate nicht zusammen gezählt werden
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*2, col="blue")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(3000, 6000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*3, col="blue")
lines(noise[,1], noise[, 2]*3, col="green")
noise <- estimateNoise(avgSpectra[[1]])
plot(avgSpectra[[1]], xlim=c(3000, 6000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*3, col="green")
peaks <- detectPeaks(avgSpectra, method="MAD",
halfWindowSize=20, SNR=2)
plot(avgSpectra[[1]], xlim=c(4000, 5000), ylim=c(0, 0.002))
points(peaks[[1]], col="red", pch=4)
peaks <- detectPeaks(avgSpectra, method="MAD",
halfWindowSize=20, SNR=2)
plot(avgSpectra[[1]], xlim=c(2000, 20000), ylim=c(0, 0.002))
points(peaks[[1]], col="red", pch=4)
samples <- factor(sapply(spectra,
function(x)metaData(x)$fileName"LON_F"))
samples <- factor(sapply(spectra,
function(x)metaData(x)$fileName))
samples <- factor(sapply(spectra,
function(x)metaData(x)$file(x)$fileName))
samples <- factor(sapply(spectra,
function(x)metaData(x)$file))
source('I:/WE13/Parasitologie/Christina Bredtmann/Method/2018.02.14-MALDI-R/Cylicostephanus longibursatus F/LON_F_01/LON_f01.R')
setwd("I:/WE13/Parasitologie/Christina Bredtmann/Method/2018.02.14-MALDI-R/Cylicostephanus longibursatus F/LON_F_01")
getwd()
library(MALDIquant)
library(MALDIquantForeign)
library(readMzXmlData)
LON_F_01_Directory <- ("I:/WE13/Parasitologie/Christina Bredtmann/Method/2018.02.14-MALDI-R/Cylicostephanus longibursatus F/LON_F_01")
LON_F_01<-importMzXml(LON_F_01_Directory,verbose = FALSE,centroided=FALSE)
names(LON_F_01) <- paste0("replicate",1:9)
table(sapply(LON_F_01, length))
typeof(LON_F_01)
class(LON_F_01)
summary(LON_F_01)
spec1 <- readMzXmlFile(file.path("I:/WE13/Parasitologie/Christina Bredtmann/Method/2018.02.14-MALDI-R/Cylicostephanus longibursatus F/LON_F_01/0_A1/1/1SLin/LON_f01_A1_1.mzXML"))
print(spec1$metaData)
plot(spec1$spectrum$mass, spec1$spectrum$intensity, type="l")
length(LON_F_01)
LON_F_01[1:9]
any(sapply(LON_F_01, isEmpty))
table(sapply(LON_F_01, length))
#not regular, don´t know why. Don´t know how to change it.
all(sapply(LON_F_01, isRegular))
plot(LON_F_01[[4]])
plot(LON_F_01[[2]])
spectra_LON_f01 <- transformIntensity(LON_F_01, method=("sqrt"))
spectra_LON_f01 <- smoothIntensity(spectra_LON_f01, method="SavitzkyGolay",
halfWindowSize=10)
baseline <- estimateBaseline(spectra_LON_f01[[6]], method="SNIP",
iterations=100)
plot(spectra_LON_f01[[6]])
lines(baseline, col="red", lwd=2)
spectra_LON_f01 <- removeBaseline(spectra_LON_f01, method="SNIP",
iterations=100)
plot(spectra_LON_f01[[1]])
plot(spectra_LON_f01[[4]])
plot(spectra_LON_f01[[7]])
spectra_LON_f01 <- calibrateIntensity(spectra_LON_f01, method="TIC")
spectra_LON_f01 <- alignSpectra(spectra_LON_f01,
halfWindowSize=20,
SNR=2,
tolerance=0.002,
warpingMethod="lowess")
avgLON_f01 <- averageMassSpectra(spectra_LON_f01,
method="mean")
noise <- estimateNoise(avgLON_f01)
plot(avgLON_f01, xlim=c(4000, 5000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*2, col="blue")
lines(noise[,1], noise[, 2]*3, col="green")
plot(avgLON_f01, xlim=c(3000, 6000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*2, col="blue")
lines(noise[,1], noise[, 2]*3, col="green")
plot(avgLON_f01, xlim=c(2000, 20000), ylim=c(0, 0.002))
lines(noise, col="red")
lines(noise[,1], noise[, 2]*2, col="blue")
lines(noise[,1], noise[, 2]*3, col="green")
peaks <- detectPeaks(avgLON_f01, method="MAD",
halfWindowSize=20, SNR=2)
plot(avgLON_f01, xlim=c(4000, 5000), ylim=c(0, 0.002))
points(peaks, col="red", pch=4)
plot(avgLON_f01, xlim=c(2000, 20000), ylim=c(0, 0.002))
points(peaks, col="red", pch=4)
str(peaks)
list(peaks)
class(peaks)
length(peaks)
isMassPeaks(peaks)
peaks<-binPeaks(peaks) #not working because peaks are already aligned?
peaks<-filterPeaks(peaks, minFrequency = 0.25)
